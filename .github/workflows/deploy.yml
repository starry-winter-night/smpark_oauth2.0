name: Deploy to MacBook

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && '.env.production' || '.env.development' }} # 브랜치에 따라 구분

    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create environment file
        run: |
          cat << EOF > .env.${{ vars.NODE_ENV }}
          LOGIN_EXPIRES_IN=${{ secrets.LOGIN_EXPIRES_IN }}
          LOGIN_JWT_SECRET_KEY=${{ secrets.LOGIN_JWT_SECRET_KEY }}
          MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}
          MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}
          MONGO_DATABASE_SESSION_COLLECTION=${{ secrets.MONGO_DATABASE_SESSION_COLLECTION }}
          MONGO_DATABASE_SESSION_KEY=${{ secrets.MONGO_DATABASE_SESSION_KEY }}
          MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}
          MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}
          OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}
          OAUTH_ACCESS_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_ACCESS_TOKEN_EXPIRES_IN }}
          OAUTH_CODE_EXPIRES_IN=${{ secrets.OAUTH_CODE_EXPIRES_IN }}
          OAUTH_REFRESH_SECRET_KEY=${{ secrets.OAUTH_REFRESH_SECRET_KEY }}
          OAUTH_REFRESH_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_REFRESH_TOKEN_EXPIRES_IN }}
          NODE_ENV=${{ vars.NODE_ENV }}
          OAUTH_ISSUER=${{ vars.OAUTH_ISSUER }}
          NGINX_PORT=${{ vars.NGINX_PORT }}
          APP_PORT=${{ vars.APP_PORT }}
          VERSION=${{ vars.VERSION }}
          EOF

      - name: Build and push Docker image
        run: |
          yarn start:${{ env.ENV_NAME }}
          docker push ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }}

      - name: Deploy application
        run: |
          docker pull ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }}
          docker stop oauth2.0_${{ vars.VERSION }} || true
          docker rm oauth2.0_${{ vars.VERSION }} || true
          docker network create smpark_oauth_network_${{ env.ENV_NAME }} || true
          docker run -d --name oauth2.0_${{ vars.VERSION }} \
            -p ${{ vars.NGINX_PORT }}:${{ vars.APP_PORT }} \
            -e NODE_ENV=${{ vars.NODE_ENV }} \
            --env-file .env.${{ vars.NODE_ENV }} \
            -v smpark_log:/usr/src/oauth2.0/src/log \
            --network smpark_oauth_network_${{ env.ENV_NAME }} \
            ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }} \
            yarn ${{ env.ENV_NAME }}

      - name: Update Nginx configuration (Production only)
        #if: ${{ env.NODE_ENV == 'production' }}
        run: |
          sudo tee /opt/homebrew/etc/nginx/nginx.conf > /dev/null <<EOT
          user smpark admin;
          worker_processes auto;
          events {
              worker_connections 1024;
          }
          http {
              include       mime.types;
              default_type  application/octet-stream;
              sendfile        on;
              keepalive_timeout  65;
              server {
                  listen 80;
                  server_name smpark.ddns.net;
                  return 301 https://\$server_name\$request_uri;
              }
              server {
                  listen 443 ssl;
                  server_name smpark.ddns.net;
                  ssl_certificate /etc/letsencrypt/live/smpark.ddns.net/fullchain.pem;
                  ssl_certificate_key /etc/letsencrypt/live/smpark.ddns.net/privkey.pem;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  location / {
                      proxy_pass http://localhost:${{ vars.NGINX_PORT }};
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                  }
              }
          }
          EOT

      - name: Validate Nginx configuration (Production only)
        #if: ${{ env.NODE_ENV == 'production' }}
        run: sudo nginx -t
      - name: Restart Nginx (Production only)
        #if: ${{ env.NODE_ENV == 'production' }}
        run: sudo brew services restart nginx
