name: Deploy to MacBook

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && '.env.production' || '.env.development' }} # 브랜치에 따라 구분

    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create environment file
        run: |
          cat << EOF > .env.${{ vars.NODE_ENV }}
          LOGIN_EXPIRES_IN=${{ secrets.LOGIN_EXPIRES_IN }}
          LOGIN_JWT_SECRET_KEY=${{ secrets.LOGIN_JWT_SECRET_KEY }}
          MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}
          MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}
          MONGO_DATABASE_SESSION_COLLECTION=${{ secrets.MONGO_DATABASE_SESSION_COLLECTION }}
          MONGO_DATABASE_SESSION_KEY=${{ secrets.MONGO_DATABASE_SESSION_KEY }}
          MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}
          MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}
          OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}
          OAUTH_ACCESS_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_ACCESS_TOKEN_EXPIRES_IN }}
          OAUTH_CODE_EXPIRES_IN=${{ secrets.OAUTH_CODE_EXPIRES_IN }}
          OAUTH_REFRESH_SECRET_KEY=${{ secrets.OAUTH_REFRESH_SECRET_KEY }}
          OAUTH_REFRESH_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_REFRESH_TOKEN_EXPIRES_IN }}
          NODE_ENV=${{ vars.NODE_ENV }}
          OAUTH_ISSUER=${{ vars.OAUTH_ISSUER }}
          NGINX_PORT=${{ vars.NGINX_PORT }}
          APP_PORT=${{ vars.APP_PORT }}
          VERSION=${{ vars.VERSION }}
          EOF

      - name: Build and push Docker image
        run: |
          yarn start:${{ env.ENV_NAME }}
          docker push ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }}

      - name: Deploy application
        run: |
          # 변수 설정
          CONTAINER_NAME="oauth2.0_${{ vars.VERSION }}"
          NETWORK_NAME="smpark_oauth_network_${{ env.ENV_NAME }}"
          
          echo "Preparing to deploy ${CONTAINER_NAME}"
          
          # 기존 컨테이너 강제 제거
          echo "Removing existing container (if any)..."
          docker rm -f ${CONTAINER_NAME} || true
          
          # 이미지 풀
          echo "Pulling latest image..."
          docker pull ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }}
          
          # 네트워크 생성 (이미 존재하면 무시)
          echo "Ensuring network exists..."
          docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || \
            docker network create ${NETWORK_NAME}
          
          # 볼륨 생성 (이미 존재하면 무시)
          echo "Ensuring volume exists..."
          docker volume inspect smpark_log >/dev/null 2>&1 || \
            docker volume create smpark_log
          
          # 새 컨테이너 실행
          echo "Starting new container..."
          docker run -d --name ${CONTAINER_NAME} \
            -p ${{ vars.NGINX_PORT }}:${{ vars.APP_PORT }} \
            -e NODE_ENV=${{ vars.NODE_ENV }} \
            --env-file .env.${{ vars.NODE_ENV }} \
            -v smpark_log:/usr/src/oauth2.0/src/log \
            --network ${NETWORK_NAME} \
            ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }} \
            yarn ${{ env.ENV_NAME }}
          
          # 실행 중인 컨테이너 확인
          echo "Verifying container is running..."
          if docker ps | grep -q ${CONTAINER_NAME}; then
            echo "Container ${CONTAINER_NAME} is running successfully."
          else
            echo "Container failed to start. Checking logs..."
            docker logs ${CONTAINER_NAME}
            exit 1
          fi
          
          echo "Deployment completed successfully."
        run: |
          # 이미지 풀
          docker pull ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }}
          
          # 컨테이너 이름 설정
          CONTAINER_NAME="oauth2.0_${{ vars.VERSION }}"
          
          # 기존 컨테이너 확인 및 제거
          if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
            echo "Stopping and removing existing container..."
            docker stop ${CONTAINER_NAME}
            docker rm ${CONTAINER_NAME}
          fi
          
          # 네트워크 생성 (이미 존재하면 무시)
          NETWORK_NAME="smpark_oauth_network_${{ env.ENV_NAME }}"
          docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || \
            docker network create ${NETWORK_NAME}
          
          # 볼륨 생성 (이미 존재하면 무시)
          docker volume inspect smpark_log >/dev/null 2>&1 || \
            docker volume create smpark_log
          
          # 새 컨테이너 실행
          echo "Starting new container..."
          docker run -d --name ${CONTAINER_NAME} \
            -p ${{ vars.NGINX_PORT }}:${{ vars.APP_PORT }} \
            -e NODE_ENV=${{ vars.NODE_ENV }} \
            --env-file .env.${{ vars.NODE_ENV }} \
            -v smpark_log:/usr/src/oauth2.0/src/log \
            --network ${NETWORK_NAME} \
            ${{ vars.DOCKER_IMAGE }}:${{ vars.VERSION }} \
            yarn ${{ env.ENV_NAME }}
          
          # 실행 중인 컨테이너 확인
          echo "Verifying container is running..."
          docker ps | grep ${CONTAINER_NAME}
          
          if [ $? -ne 0 ]; then
            echo "Container failed to start. Checking logs..."
            docker logs ${CONTAINER_NAME}
            exit 1
          fi
          
          echo "Deployment completed successfully."

      - name: Update Nginx configuration (Production only)
        if: ${{ env.NODE_ENV == 'production' }}
        run: |
          sudo tee /opt/homebrew/etc/nginx/nginx.conf > /dev/null <<EOT
          user smpark admin;
          worker_processes auto;
          events {
              worker_connections 1024;
          }
          http {
              include       mime.types;
              default_type  application/octet-stream;
              sendfile        on;
              keepalive_timeout  65;
              server {
                  listen 80;
                  server_name smpark.ddns.net;
                  return 301 https://\$server_name\$request_uri;
              }
              server {
                  listen 443 ssl;
                  server_name smpark.ddns.net;
                  ssl_certificate /etc/letsencrypt/live/smpark.ddns.net/fullchain.pem;
                  ssl_certificate_key /etc/letsencrypt/live/smpark.ddns.net/privkey.pem;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  location / {
                      proxy_pass http://localhost:${{ vars.NGINX_PORT }};
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                  }
              }
          }
          EOT

      - name: Validate Nginx configuration (Production only)
        if: ${{ env.NODE_ENV == 'production' }}
        run: sudo nginx -t
      - name: Restart Nginx (Production only)
        if: ${{ env.NODE_ENV == 'production' }}
        run: sudo brew services restart nginx
