name: Deploy to MacBook

on:
  push:
    branches: [main, dev]

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }} # 브랜치에 따라 구분

    env:
      APP_PORT: ${{ github.ref == 'refs/heads/main' && '5555' || '4000' }}
      DOCKER_IMAGE: smpark9596/oauth2.0
      NGINX_PORT: ${{ github.ref == 'refs/heads/main' && '3333' || '4000' }}
      NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      NODE_VERSION: 20.14.0
      OAUTH_ISSUER: https://smpark.ddns.net
      VERSION: 1.0.0

    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create environment file
        run: |
          cat << EOF > .env.${{ env.NODE_ENV }}
          LOGIN_EXPIRES_IN=${{ secrets.LOGIN_EXPIRES_IN }}
          LOGIN_JWT_SECRET_KEY=${{ secrets.LOGIN_JWT_SECRET_KEY }}
          MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}
          MONGO_DATABASE_PASSWORD=${{ secrets.MONGO_DATABASE_PASSWORD }}
          MONGO_DATABASE_SESSION_COLLECTION=${{ secrets.MONGO_DATABASE_SESSION_COLLECTION }}
          MONGO_DATABASE_SESSION_KEY=${{ secrets.MONGO_DATABASE_SESSION_KEY }}
          MONGO_DATABASE_URI=${{ secrets.MONGO_DATABASE_URI }}
          MONGO_DATABASE_USER=${{ secrets.MONGO_DATABASE_USER }}
          OAUTH_ACCESS_SECRET_KEY=${{ secrets.OAUTH_ACCESS_SECRET_KEY }}
          OAUTH_ACCESS_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_ACCESS_TOKEN_EXPIRES_IN }}
          OAUTH_CODE_EXPIRES_IN=${{ secrets.OAUTH_CODE_EXPIRES_IN }}
          OAUTH_REFRESH_SECRET_KEY=${{ secrets.OAUTH_REFRESH_SECRET_KEY }}
          OAUTH_REFRESH_TOKEN_EXPIRES_IN=${{ secrets.OAUTH_REFRESH_TOKEN_EXPIRES_IN }}
          NODE_ENV=${{ env.NODE_ENV }}
          OAUTH_ISSUER=${{ env.OAUTH_ISSUER }}
          NGINX_PORT=${{ env.NGINX_PORT }}
          APP_PORT=${{ env.APP_PORT }}
          VERSION=${{ env.VERSION }}
          EOF
          cat .env.${{ env.NODE_ENV }}

      - name: Build and push Docker image
        run: |
          yarn docker:${{ env.NODE_ENV }}-build
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}

      - name: Deploy application
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}
          docker stop oauth2.0_${{ env.VERSION }} || true
          docker rm oauth2.0_${{ env.VERSION }} || true
          docker network create smpark_oauth_network_${{ github.event.deployment.environment }} || true
          docker run -d --name oauth2.0_${{ env.VERSION }} \
            -p ${{ env.NGINX_PORT }}:${{ env.APP_PORT }} \
            -e NODE_ENV=${{ env.NODE_ENV }} \
            --env-file .env.${{ github.event.deployment.environment }} \
            -v smpark_log:/usr/src/oauth2.0/src/log \
            --network smpark_oauth_network_${{ github.event.deployment.environment }} \
            ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }} \
            yarn ${{ env.NODE_ENV }}

      - name: Update Nginx configuration (Production only)
        if: ${{ github.event.deployment.environment == 'production' }}
        run: |
          sudo tee /opt/homebrew/etc/nginx/nginx.conf > /dev/null <<EOT
          user smpark admin;
          worker_processes auto;
          events {
              worker_connections 1024;
          }
          http {
              include       mime.types;
              default_type  application/octet-stream;
              sendfile        on;
              keepalive_timeout  65;
              server {
                  listen 80;
                  server_name smpark.ddns.net;
                  return 301 https://\$server_name\$request_uri;
              }
              server {
                  listen 443 ssl;
                  server_name smpark.ddns.net;
                  ssl_certificate /etc/letsencrypt/live/smpark.ddns.net/fullchain.pem;
                  ssl_certificate_key /etc/letsencrypt/live/smpark.ddns.net/privkey.pem;
                  ssl_protocols TLSv1.2 TLSv1.3;
                  location / {
                      proxy_pass http://localhost:${{ env.NGINX_PORT }};
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                  }
              }
          }
          EOT

      - name: Validate Nginx configuration (Production only)
        if: ${{ github.event.deployment.environment == 'production' }}
        run: sudo nginx -t
      - name: Restart Nginx (Production only)
        if: ${{ github.event.deployment.environment == 'production' }}
        run: sudo brew services restart nginx
